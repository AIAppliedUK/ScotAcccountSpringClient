Relying Parties are required to provide the below details to ScotAccount to set up a client ID:
public IP Addresses re backend (not needed for connection to Integration/ test environment)
your private_key_jwt, public part
your FQDN
your redirect url
your logout url
a name of your service
the list of scopes RP would like to be able to request, these are outlined in Technical - Overview
We will then Register a Client and provide Back a “Client ID”.

Note: Step 6 “name of your service”, will be displayed on specific ScotAccount pages for dual branding purposes

1. Provide IPs for our Allow Lists

For Production, you will need to provide any IPs for your “BackEnd” to communicate with the service. This is a Security Mechanism to restrict access. They are not needed to connect you to Integration/ test environment.
We prefer individual, static IPs where possible
But ranges are also allowed 2. Provide your public key for private_key_jwt method call

As part of our client authentication process, the Relying Party application will need to provide a signed JWT called a ‘client assertion’ on endpoints that require ‘private_key_jwt’ authentication.
You’ll need your private key when:
You request the token using the private key authentication mechanism on the /token endpoint.
You request data from Issuer Attribute Endpoint ( /attributes/values )
You’ll need to provide a public key when registering your service. You can generate a key pair (a public key and a corresponding private key) using OpenSSL.

Best Practices for storing and handling private keys:
Once you’ve generated your private key you must store the private key in a secure location such as AWS Secrets Manager or HashiCorp Vault.
Limit access to the private key to authorized personnel only
Do not share the private key with unauthorized individuals
Key must be mounted into the application at runtime using a tmpfs file.
You MUST use a different set of key pair for Production to the one you use in the test environment/s.
Supported Algorithms
We support RSA or Elliptic Curve based signing keys.
When deciding between ECDSA vs RSA, both can provide equivalent levels of security given long enough key sizes. As ECDSA uses smaller keys to achieve the same level of security and it generally performs faster than RSA.
When generating an RSA key you need to decide how long the key will be. A longer key is more secure but slower.
When generating an elliptic curve key you need to decide on a curve to use which corresponds to the length of the key, similar to RSA a longer key is more secure but slower.
For ES256 (256 ECDSA key using curve P256 and SHA-256) this provides 128 bits of security and is considered safe from being cracked beyond 2030. For and RSA key to provide equivalent security it will have to have a key size of 3072 bits or greater. A 2048 bit RSA key is still considered safe from being cracked for the next few years but longer is recommended.
Using OpenSSL, run the following on your command line to generate an RSA key pair:

openssl genrsa -out private_key.pem 3072
openssl rsa -pubout -in private_key.pem -out public_key.pem
The last parameter (3072 here) is the length of the RSA key in bits.
private_key.pem: This file contains the RSA private key.
public_key.pem: This file contains the corresponding RSA public key extracted from the private key.

the number of bits needs to be 2048 or greater
When generating an elliptic curve key you should use the curve below.
JWT Signing algorithm
Curve
OpenSSL curve name
ES256
P-256
prime256v1
Using OpenSSL, run the following on your command line to generate an EC key pair:

openssl ecparam -name prime256v1 -genkey -noout -out private_key.pem
openssl ec -in private_key.pem -pubout -out public_key.pem
ecparam generates the EC private key.
-name prime256v1 specifies the elliptic curve to use.
-out private_key.pem specifies the output file for the private key.
-genkey generates the key pair.
-noout prevents output of the parameters of the key.
ec -pubout extracts the public key from the private key.
-in private_key.pem specifies the input file for the private key.
-out public_key.pem specifies the output file for the public key
You have now generated your key pair, which will appear on your machine as 2 files:
public_key.pem - This is your public key, which you should share with us.
private_key.pem - This is your private key, which you should store securely and NOT share.
Once you have generated your key pair, you can use it to create a private_key_jwt.
Process to create JWK key via Command line:
A simple Java command-line utility created by Justin Richer can be used to generate keys in JWK format. It supports these key types:
RSA key
EC key
Example: validate a public_key_jwt :

java -jar json-web-key-generator.jar -t RSA -s 2048 -i 1 -u sig -S
The JWK generator will then output a JSON object similar to this:

{
"keys": [
{
"d": "Y5ULK-bLRqKAg6FcuDx4HCQmnMYUv67IQ394KBmw6F-LbdbMhNyn6UH2RAr4Wkg-TL0QXZbfuOdvvE8ZlGeWJxCGx2XOzO1wQT12mhNTD1S9NtrD_wQMc34sE6Qy5JK2CE-tWzPRT_cKzWXEJGsR0FWHphUjZOg7-vfAgPYZaZ7rptdgtq3mEs45MiURVx7DBgu5AH2x0R-s37wtR1Xw9Vx1tD6ScGl7sMu7RWerDbkkfuAUSnON_8lHzHt_GvWYI3za4KiWRH5HeYVACQ3nBrnKju_kMp9lLEGC6pgbLkthnvjf0KjMcUoKrRMKKbENhyzwFcZ6pZAtdUg-Ec3AYQ",
"e": "AQAB",
"n": "j37Y-Fmx2Pr9xCHXhBWvDRaXobvpikF2Nd2J_FoK8U5SlMebmqrEwddegw4OoWbBcTfcK9UMiK7mOYH7xpIxPmXyUl_ByMLT-0gTLhq-KhzsZ3SxoUqVThF6-x8XJ8DiBYO3RUSfZ3xwQwHtlXdhg6hk-iUaArYBEKGhp8R75d4w6gFHXnSzgY_llxwU7dBFUgk6H1CbBK1ozmOP5xzgnSovYt5PEetwfHjbSm_q1yFd9AuwT5QgFQhmB2jJH9rdL_W4zf8U71a3tuN-fG3LmXc2jtuDMg5LAVjzaXtPX0kQKH8_88qER1UeNfa3ceJgCfvr_EVt8PkIkh8mhB4AbQ",
"kty": "RSA",
"use": "sig",
"kid": "1"
}
]
}

Note: The JWK generator sources can be obtained from its Github repo at GitHub - bspk/json-web-key-generator: A Java-based generator for JWK and JPSKs

3. Provide us with you FQDN or localhost

As part of the on-boarding process you will need to provide us with your fully qualified Domain Name.
You can supply “localhost”, if you are running both the client browser and the server from your laptop
You can supply, a Public FQDN. Example “dummyrp.test.org.gov.scot”

The use of “localhost and “http” is ONLY allowed in our integration environment 4. Provide us with your redirect URI

As part of the on-boarding process you will need to provide us a set of one of many redirect-uri, as part of the client registration process.
Full detailed information can be found in “Stage 3 - Technical - Make Requests with Auth Code Flow and PKCE” 5. Provide us with your Logout URI

As part of the on-boarding client registration process you are asked provide us a Logout uri More information about the use of Logout can be found in “Stage 3 Technical - Make a Request for Logout” section.
For an Example, see below:
https://yourservicetest.gov.scot/logout 6. We will Register a Client, and provide Back a “Client ID”

Once you have provided us all the information from steps 1 to 5, we will register your Relying Party application and return a “Client ID”, back to RPs/SCs. 7. List of scopes RP would like to be able to request

openid is required for every request and on its own it is authentication only
openid  
scotaccount.email
scotaccount.gpg45.medium
scotaccount.address 8. Simple Test

There is a simple way you can use to ensure the IP Allow List has been implemented for you in our integration environment as follows:


If failure, you will receive a http response code of 503, timeout. You should contact us in this case.
Example Version Json object

{"App":{"SSO":{"Authn-Frontend":{"commit_sha":"c59129d74871de4beca837ed6045c6e973c23d2

Discovery page or well known endpoint:
{
    "introspection_endpoint" : "https:\/\/authz.integration.scotaccount.service.gov.scot\/token\/introspect",
    "issuer" : "https:\/\/authz.integration.scotaccount.service.gov.scot",
    "authorization_endpoint" : "https:\/\/authz.integration.scotaccount.service.gov.scot\/authorize",
    "claims_supported" : [ "sub", "iss" ],
    "token_endpoint_auth_methods_supported" : [ "private_key_jwt" ],
    "backchannel_logout_session_supported" : true,
    "token_endpoint" : "https:\/\/authz.integration.scotaccount.service.gov.scot\/token",
    "response_types_supported" : [ "code" ],
    "grant_types_supported" : [ "authorization_code" ],
    "code_challenge_methods_supported" : [ "S256" ],
    "frontchannel_logout_session_supported" : true,
    "attributes_endpoint" : "https:\/\/issuer.main.integration.scotaccount.service.gov.scot\/attributes\/values",
    "dis_prompt" : "create_account",
    "scopes_supported" : [
                            "openid",
                            "scotaccount.gpg45.medium",
                            "scotaccount.address",
                            "scotaccount.email",
                            "scotaccount.mobile"
                        ],
    "backchannel_logout_supported" : true,
    "claim_types_supported" : [ "normal" ],
    "end_session_endpoint" : "https:\/\/authz.integration.scotaccount.service.gov.scot\/authorize\/logout",
    "token_endpoint_auth_signing_alg_values_supported" : [ "RS256", "ES256" ],
    "frontchannel_logout_supported" : true,
    "jwks_uri" : "https:\/\/authz.integration.scotaccount.service.gov.scot\/jwks.json",
    "subject_types_supported" : [ "public" ],
    "id_token_signing_alg_values_supported" : [ "RS256" ]
}
