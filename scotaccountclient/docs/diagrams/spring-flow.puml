@startuml Spring Application Flow

skinparam noteBackgroundColor #FEFECE
skinparam noteBorderColor #999999

actor "Browser" as browser
participant "Spring Security Filter Chain" as securityFilter
participant "SecurityConfig" as secConfig #E0FFE0
participant "OAuth2AuthorizationRequestResolver" as requestResolver
participant "OAuth2AuthorizationRequestRepository" as requestRepo
participant "OAuth2LoginAuthenticationFilter" as loginFilter
participant "OAuth2AuthorizedClientRepository" as clientRepo
participant "OAuth2AuthenticationToken" as authToken
participant "OAuth2AuthorizationCodeAuthenticationProvider" as authProvider
participant "OAuth2AuthorizationCodeAuthenticationToken" as codeAuthToken
participant "OAuth2AuthorizationResponse" as authResponse
participant "HomeController" as homeCtrl #E0FFE0
participant "LoginController" as loginCtrl #E0FFE0
participant "VerificationController" as verifyCtrl #E0FFE0
participant "LogoutController" as logoutCtrl #E0FFE0
participant "Authorization Server" as authServer #E0F0FF
participant "Token Endpoint" as tokenEndpoint #E0F0FF
participant "Attributes Endpoint" as attrEndpoint #E0F0FF

== Application Startup ==
secConfig -> secConfig: configure(HttpSecurity)
activate secConfig
secConfig -> secConfig: oauth2Login()\ncustomize()
secConfig -> requestResolver: register()
secConfig -> requestRepo: register()
secConfig -> authProvider: register()
deactivate secConfig

== Initial Home Page Request ==
browser -> securityFilter: GET /\nCookie: JSESSIONID=<session_id>
securityFilter -> homeCtrl: index()
activate homeCtrl
homeCtrl --> browser: Home page view\nSet-Cookie: JSESSIONID=<session_id>
deactivate homeCtrl

== Initial Login Request ==
browser -> securityFilter: GET /oauth2/authorization/scotaccount\nCookie: JSESSIONID=<session_id>
activate securityFilter

securityFilter -> requestResolver: resolve(HttpServletRequest)
activate requestResolver
requestResolver -> requestResolver: generateState()\ngeneratePKCE()
note right
  Stores in session:
  - code_verifier
  - state
  - nonce
end note
requestResolver --> securityFilter: OAuth2AuthorizationRequest
deactivate requestResolver

securityFilter -> requestRepo: saveAuthorizationRequest()
activate requestRepo
requestRepo --> securityFilter: void
deactivate requestRepo

securityFilter --> browser: 302 Redirect to Authorization Server\nLocation: /authorize?...\nSet-Cookie: JSESSIONID=<session_id>
deactivate securityFilter

== Authorization Server Interaction ==
browser -> authServer: GET /authorize\nQuery params:\n- client_id=scotaccount\n- response_type=code\n- redirect_uri=.../login/oauth2/code/scotaccount\n- scope=openid\n- state=<state>\n- code_challenge=<challenge>\n- code_challenge_method=S256\n- nonce=<nonce>
activate authServer
authServer --> browser: Login & Consent UI
browser -> authServer: POST credentials & consent
authServer --> browser: 302 Redirect\nLocation: .../login/oauth2/code/scotaccount?code=<auth_code>&state=<state>
deactivate authServer

== Authorization Code Processing ==
browser -> loginFilter: GET /login/oauth2/code/scotaccount
activate loginFilter
loginFilter -> loginCtrl: onAuthenticationSuccess()
activate loginCtrl

loginCtrl -> clientRepo: loadAuthorizedClient()
activate clientRepo
note right
  Stores in session:
  - access_token
  - id_token
  - token_claims
end note
clientRepo --> loginCtrl: OAuth2AuthorizedClient
deactivate clientRepo

loginCtrl --> browser: 302 Redirect to /
deactivate loginCtrl
deactivate loginFilter

== Verification Flow ==
browser -> securityFilter: POST /verify
activate securityFilter
securityFilter -> verifyCtrl: initiateVerification()
activate verifyCtrl

verifyCtrl -> verifyCtrl: validateScopes()
note right
  Validates requested scopes:
  - scotaccount.address
  - scotaccount.email
end note

verifyCtrl -> verifyCtrl: storeVerificationScopes()
note right
  Stores in session:
  - verification_scopes
end note

verifyCtrl --> browser: 302 Redirect to /oauth2/authorization/scotaccount
deactivate verifyCtrl
deactivate securityFilter

== Attribute Verification ==
browser -> securityFilter: GET /attributes
activate securityFilter
securityFilter -> verifyCtrl: fetchAttributes()
activate verifyCtrl

verifyCtrl -> attrEndpoint: GET /attributes/values
activate attrEndpoint
attrEndpoint --> verifyCtrl: User Attributes
deactivate attrEndpoint

verifyCtrl -> verifyCtrl: processAttributes()
note right
  Processes:
  - email
  - address
  - other verified claims
end note

verifyCtrl --> browser: Attributes Response
deactivate verifyCtrl
deactivate securityFilter

== Logout Flow ==
browser -> securityFilter: POST /logout
activate securityFilter
securityFilter -> logoutCtrl: logout()
activate logoutCtrl

logoutCtrl -> logoutCtrl: invalidateSession()
note right
  Cleans up:
  - HTTP Session
  - Security Context
  - Cookies
end note

logoutCtrl --> browser: 302 Redirect to /
deactivate logoutCtrl
deactivate securityFilter

== Error Handling ==
alt Authentication Error
    loginCtrl -> loginCtrl: onAuthenticationFailure()
    loginCtrl --> browser: 302 Redirect to /?error=auth_error
else Verification Error
    verifyCtrl -> verifyCtrl: handleVerificationError()
    verifyCtrl --> browser: 302 Redirect to /?error=verification_error
else Logout Error
    logoutCtrl -> logoutCtrl: handleLogoutError()
    logoutCtrl --> browser: 302 Redirect to /?error=logout_error
end

@enduml 